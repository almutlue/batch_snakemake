# Subworkflow Simulation
#
# Contributors: @almutlue 
#

# --- Imports --- #

configfile: "config.yaml"
import glob
import os
import logging


# --- Build --- #


## -------------------------------------------------------------------------- ##
## EdgeR
## -------------------------------------------------------------------------- ##
rule edgeR:
    input: 
        data = config["out_type"] + "type_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_sim"] + "run_edgeR.R"
    output:
        out = config["out_edger"] + "edgeR_{sample}.rds"
    log:
        config["log_edger"] + "edgeR_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Simulation
## -------------------------------------------------------------------------- ##
rule sim:
    input: 
        data = config["out_edger"] + "edgeR_{sample}.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_sim"] + "sim_sce.R",
        sim = config["src_meta_sim"] + "{sim_name}.rds"
    params:
        out_path = config["out_sim"] + "{sample}"
    output:
        out = config["out_sim"] + "{sample}/sim_{sample}_{sim_name}_sce.rds"
    log:
        config["log_sim"] + "sim_{sample}_{sim_name}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' sim='{input.sim}' out_path='{params.out_path}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Characterize all simulations
## -------------------------------------------------------------------------- ##
rule char_sim:
    input: 
        sim_sce = config["out_sim"] + "{sample}/sim_{sample}_{sim_name}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_sim"] + "char_sim_sce.R"
    params:
        out_path = config["out_sim_char"] + "{sample}"
    output:
        out = config["out_sim_char"] + "{sample}/sim_{sample}_{sim_name}_sce.rds"
    log:
        config["log_sim_char"] + "sim_{sample}_{sim_name}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args params='{input.param}' sim_sce='{input.sim_sce}' out_path='{params.out_path}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Characterize realistic simulation
## -------------------------------------------------------------------------- ##

## -------------------------------------------------------------------------- ##
## Check CountSimQC
## -------------------------------------------------------------------------- ##

rule countSimQC:
    input: 
        sce_sim = config["out_sim_char"] + "{sample_sim}/sim_{sample_sim}_1__1_sce.rds",
        sce_real = config["src_data"] + "{sample_sim}.rds",
        script = config["src_sim"] + "run_countSimQC.R"
    params:
        out = config["docs"]
    output:
        out = config["docs"] + "countSimQC_{sample_sim}.html"
    log:
        config["log_sim_QC"] + "countSimQC_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args sce_sim='{input.sce_sim}' sce_real='{input.sce_real}' outputfile='{params.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Adjust params to simulation
## -------------------------------------------------------------------------- ##

rule change_params:
    input: 
        param = config["out_set"] + "settings_{sample_sim}.rds",
        script = config["src_data_mgt"] + "adjust_params_simdata.R"
    output:
        out = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds"
    log:
        config["log_adjust_params"] + "adjust_params_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        

## -------------------------------------------------------------------------- ##
## Variance partitioning simulation
## -------------------------------------------------------------------------- ##

rule variance_part:
    input:
        data = config["out_sim_char"] + "{sample_sim}/sim_{sample_sim}_1__1_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        script = config["src_analysis"] + "variance_part.R"
    output:
        out = config["out_sim_vp"] + "vp_sim_{sample_sim}_sce.rds"
    log:
        config["log_sim_vp"] + "vp_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        


## -------------------------------------------------------------------------- ##
## Variance partitioning simulation celltype_specific
## -------------------------------------------------------------------------- ##

rule variance_part_ct:
    input:
        data = config["out_sim_char"] + "{sample_sim}/sim_{sample_sim}_1__1_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        script = config["src_analysis"] + "variance_part_ct.R"
    output:
        out = config["out_sim_vp_ct"] + "vp_ct_sim_{sample_sim}_sce.rds"
    log:
        config["log_sim_vp_ct"] + "vp_ct_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Variance partitioning celltype summary
## -------------------------------------------------------------------------- ##

rule var_part_ct_sum:
    input: 
        data_path = config["out_sim_vp_ct"],
        out_path = config["out_fig"] + "var_part/",
        check = expand(config["out_sim_vp_ct"] + "vp_ct_sim_{sample}_sce.rds", sample = sample_sim),        
        script = config["src_summary"] + "var_part_ct_sim.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "var_part_ct_sim.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_path='{input.data_path}', out_path ='{input.out_path}'))"'''

        
## -------------------------------------------------------------------------- ##
## Differential abundance
## -------------------------------------------------------------------------- ##

rule abundance:
    input: 
        data = config["out_sim_vp"] + "vp_sim_{sample_sim}_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        script = config["src_analysis"] + "abundance.R"
    output:
        out = config["out_sim_abund"] + "abundance_sim_{sample_sim}.rds"
    log:
        config["log_sim_abund"] + "abundance_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''



## -------------------------------------------------------------------------- ##
## Differential expression
## -------------------------------------------------------------------------- ##

rule de:
    input: 
        data = config["out_sim_vp"] + "vp_sim_{sample_sim}_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        script = config["src_analysis"] + "de.R"
    output:
        out = config["out_sim_de"] + "de_sim_{sample_sim}.rds",
        out_sce = config["out_sim_de"] + "de_sim_{sample_sim}_sce.rds"
    log:
        config["log_sim_de"] + "de_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}' outputsce='{output.out_sce}'" {input.script} {log}'''
        
        

## -------------------------------------------------------------------------- ##
## Batch type
## -------------------------------------------------------------------------- ##

rule batch_type:
    input: 
        data = config["out_sim_de"] + "de_sim_{sample_sim}_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        script = config["src_analysis"] + "batch_type.R"
    output:
        out = config["out_sim_type"] + "type_sim_{sample_sim}_sce.rds"
    log:
        config["log_sim_type"] + "type_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
    
  
  
## -------------------------------------------------------------------------- ##
## Summarize cms
## -------------------------------------------------------------------------- ##

rule summarize_cms:
    input: 
        data = config["out_sim_type"] + "type_sim_{sample_sim}_sce.rds",
        script = config["src_sim"] + "summarise_cms.R",
        sim = expand(config["out_sim_char"] + "{sample_sim}/sim_{sample_sim}_{sim_name}_sce.rds", sample_sim = sample_sim, sim_name = sim_name)
    params:
        param = ",".join(sim_name),
    output:
        out = config["out_sim_sumcms"] + "summarize_cms_sim_{sample_sim}_sce.rds"
    log:
        config["log_sim_sumcms"] + "summarize_cms_sim_{sample_sim}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{params.param}' outputfile='{output.out}'" {input.script} {log}'''
        
        
## -------------------------------------------------------------------------- ##
## Visualize Simulation
## -------------------------------------------------------------------------- ##

rule vis_sim:
    input: 
        data = config["out_sim_sumcms"] + "summarize_cms_sim_{sample_sim}_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        real = config["out_norm"] + "norm_{sample_sim}_sce.rds",
        param_real = config["out_set"] + "settings_{sample_sim}.rds",
        script = config["src_sim"] + "visualize_simulation.Rmd"
    params:
        outdir = config["docs"],
        sim = ",".join(sim_name)
    output:
        out = config["docs"] + "vis_sim_{sample_sim}.html",
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data='{input.data}', param ='{input.param}', real ='{input.real}', param_real = '{input.param_real}', sim = '{params.sim}'))"'''
  
  
## -------------------------------------------------------------------------- ##
## Summarize Simulation
## -------------------------------------------------------------------------- ##

rule summary_sim:
    input: 
        data = config["out_sim_sumcms"] + "summarize_cms_sim_{sample_sim}_sce.rds",
        param = config["out_adjust_params"] + "adjust_params_{sample_sim}.rds",
        de = config["out_sim_de"] + "de_sim_{sample_sim}.rds",
        gs = config["src_data"] + "c5.mf.v6.2.symbols.gmt",
        abund = config["out_sim_abund"] + "abundance_sim_{sample_sim}.rds",
        script = config["src_sim"] + "summary_simulation.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "simulation_{sample_sim}.html",
        out_file = config["out_sim_summary"] + "summary_sim_{sample_sim}.rds"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data='{input.data}', param ='{input.param}', de ='{input.de}', gs = '{input.gs}', abund = '{input.abund}', out_file = '{output.out_file}'))"'''



## -------------------------------------------------------------------------- ##
## Overview on all batch characterizations
## -------------------------------------------------------------------------- ##

rule overview_sim:
    input: 
        check = expand(config["out_sim_sumcms"] + "summarize_cms_sim_{sample_sim}_sce.rds", sample_sim = sample_sim),
        check2 = expand(config["out_sim_summary"] + "summary_sim_{sample_sim}.rds", sample_sim = sample_sim),
        script = config["src_sim"] + "overall_sim_batch_characteristics.Rmd"
    params:
        outdir = config["docs"],
        sce = config["out_sim_sumcms"] + "summarize_cms_sim_",
        sce_name = ",".join(sample_sim),
        meta = config["out_adjust_params"] + "adjust_params_",
        summary = config["out_sim_summary"] + "summary_sim_",
        sce_norm = config["out_sim_char"],
        out_figpath = config["out_fig"] + "over_sim/over_sim"
    output:
        out = config["docs"] + "overall_sim_batch_characteristics.html",
        out_fig = config["out_fig"] + "over_sim/over_sim_ct_spec.rds"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(sce='{params.sce}', sce_name ='{params.sce_name}', meta ='{params.meta}', summary = '{params.summary}', sce_norm = '{params.sce_norm}', fig_res ='{params.out_figpath}'))"'''



## -------------------------------------------------------------------------- ##
## Update index files
## -------------------------------------------------------------------------- ##

rule sim index:
    input: 
        check = expand(config["docs"] + "vis_sim_{sample}.html", sample = sample_sim),
        script = config["src_sim"] + "simulation_index.Rmd"
    params:
        outdir = config["docs"],
        data_names = ",".join(sample)
    output:
        out = config["docs"] + "simulation_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_names='{params.data_names}'))"'''


rule sim_char_index:
    input: 
        check = expand(config["docs"] + "simulation_{sample_sim}.html", sample_sim = sample_sim),
        script = config["src_sim"] + "sim_char_index.Rmd"
    params:
        outdir = config["docs"],
        data_names = ",".join(sample_sim)
    output:
        out = config["docs"] + "sim_char_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_names='{params.data_names}'))"'''
        

rule countSimQC_index:
    input: 
        check = expand(config["docs"] + "countSimQC_{sample_sim}.html", sample_sim = sample_sim),
        script = config["src_sim"] + "countSimQC_index.Rmd"
    params:
        outdir = config["docs"],
        data_names = ",".join(sample_sim)
    output:
        out = config["docs"] + "countSimQC_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_names='{params.data_names}'))"'''
        

rule overview_index:
    input: 
        check = config["docs"] + "overall_sim_batch_characteristics.html",
        script = config["src_sim"] + "overview_index.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "overview_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd())"'''        
        
        



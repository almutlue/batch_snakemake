# subworkflow - Characterize batch effects in single cell RNAseq data
#
# Contributors: @almutlue @zjanna

configfile: "config.yaml"

import glob
import os
import logging


# --- Main Build Rules --- #

## -------------------------------------------------------------------------- ##
## Settings
## -------------------------------------------------------------------------- ##
 
rule settings:
    input: 
        data = config["src_data"] + "{sample}.rds",
        meta = config["src_meta"] + "{sample}_meta.rds",
        script = config["src_data_mgt"] + "settings.R"
    output:
        out = config["out_set"] + "settings_{sample}.rds"
    log:
        config["log_set"] + "prepare_settings_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' meta='{input.meta}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Normalization and input checks
## -------------------------------------------------------------------------- ##

rule normalize:
    input: 
        data = config["src_data"] + "{sample}.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_data_mgt"] + "normalization.R"
    output:
        out = config["out_norm"] + "norm_{sample}_sce.rds"
    log:
        config["log_norm"] + "normalization_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        
        
## -------------------------------------------------------------------------- ##
## Variance partitioning
## -------------------------------------------------------------------------- ##

rule variance_part:
    input: 
        data = config["out_norm"] + "norm_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "variance_part.R"
    output:
        out = config["out_vp"] + "vp_{sample}_sce.rds"
    log:
        config["log_vp"] + "vp_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        
## -------------------------------------------------------------------------- ##
## Variance partitioning celltype
## -------------------------------------------------------------------------- ##

rule variance_part_ct:
    input: 
        data = config["out_norm"] + "norm_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "variance_part_ct.R"
    output:
        out = config["out_vp_ct"] + "vp_ct_{sample}_sce.rds"
    log:
        config["log_vp_ct"] + "vp_ct_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        
## -------------------------------------------------------------------------- ##
## Variance partitioning celltype summary
## -------------------------------------------------------------------------- ##

rule var_part_ct_sum:
    input: 
        data_path = config["out_vp_ct"],
        out_path = config["out_fig"] + "var_part/",
        check = expand(config["out_vp_ct"] + "vp_ct_{sample}_sce.rds", sample = sample_sim),        
        script = config["src_summary"] + "var_part_ct.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "var_part_ct.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_path='{input.data_path}', out_path ='{input.out_path}'))"'''

## -------------------------------------------------------------------------- ##
## Differential abundance
## -------------------------------------------------------------------------- ##

rule abundance:
    input: 
        data = config["out_vp"] + "vp_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "abundance.R"
    output:
        out = config["out_abund"] + "abundance_{sample}.rds"
    log:
        config["log_abund"] + "abundance_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''


## -------------------------------------------------------------------------- ##
## Cellspecific Mixing Score
## -------------------------------------------------------------------------- ##

rule cms:
    input: 
        data = config["out_vp"] + "vp_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "cms.R"
    output:
        out = config["out_cms"] + "cms_{sample}_sce.rds"
    log:
        config["log_cms"] + "cms_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        
        
        
## -------------------------------------------------------------------------- ##
## Differential expression
## -------------------------------------------------------------------------- ##

rule de:
    input: 
        data = config["out_cms"] + "cms_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "de.R"
    output:
        out = config["out_de"] + "de_{sample}.rds",
        out_sce = config["out_de"] + "de_{sample}_sce.rds"
    log:
        config["log_de"] + "de_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}' outputsce='{output.out_sce}'" {input.script} {log}'''
        
        

## -------------------------------------------------------------------------- ##
## Batch type
## -------------------------------------------------------------------------- ##

rule batch_type:
    input: 
        data = config["out_de"] + "de_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "batch_type.R"
    output:
        out = config["out_type"] + "type_{sample}_sce.rds"
    log:
        config["log_type"] + "type_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        
        
## -------------------------------------------------------------------------- ##
## Batch type variance partitioning
## -------------------------------------------------------------------------- ##

rule batch_type_var:
    input: 
        data = config["out_de"] + "de_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        script = config["src_analysis"] + "batch_type_var.R"
    output:
        out = config["out_type_var"] + "type_var_{sample}_sce.rds"
    log:
        config["log_type_var"] + "type_var_{sample}.Rout"
    shell:
        '''R CMD BATCH --no-restore --no-save "--args data='{input.data}' params='{input.param}' outputfile='{output.out}'" {input.script} {log}'''
        

## -------------------------------------------------------------------------- ##
## Batch type variance partitioning summary
## -------------------------------------------------------------------------- ##

rule batch_type_var_sum:
    input: 
        data_path = config["out_type_var"],
        out_path = config["out_fig"] + "var_part/",
        check = expand(config["out_type_var"] + "type_var_{sample}_sce.rds", sample = sample),        
        script = config["src_summary"] + "batch_type_var_part.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "batch_type_var_part.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_path='{input.data_path}', out_path ='{input.out_path}'))"'''
    
    
    
## -------------------------------------------------------------------------- ##
## Summarize batch characterization
## -------------------------------------------------------------------------- ##

rule summary:
    input: 
        data = config["out_type"] + "type_{sample}_sce.rds",
        param = config["out_set"] + "settings_{sample}.rds",
        de = config["out_de"] + "de_{sample}.rds",
        gs = config["src_data"] + "c5.mf.v6.2.symbols.gmt",
        abund = config["out_abund"] + "abundance_{sample}.rds",
        script = config["src_summary"] + "summary_batch_characterization.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "batch_effect_{sample}.html",
        out_file = config["out_summary"] + "summary_{sample}.rds"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data='{input.data}', param ='{input.param}', de ='{input.de}', gs = '{input.gs}', abund = '{input.abund}', out_file = '{output.out_file}'))"'''
        

## -------------------------------------------------------------------------- ##
## Overview on all batch characterizations
## -------------------------------------------------------------------------- ##

rule overview:
    input: 
        check = expand(config["out_type"] + "type_{sample}_sce.rds", sample = sample),
        script = config["src_summary"] + "overall_batch_characteristics.Rmd"
    params:
        outdir = config["docs"],
        sce = config["out_type"] + "type_",
        sce_name = ",".join(sample),
        meta = config["out_set"] + "settings_",
        summary = config["out_summary"] + "summary_",
        sce_norm = config["out_norm"] + "norm_",
        out_figpath = config["out_fig"] + "over_real/over_real"
    output:
        out = config["docs"] + "overall_batch_characteristics.html",
        out_fig = config["out_fig"] + "over_real/over_real_ct_spec.rds"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(sce='{params.sce}', sce_name ='{params.sce_name}', meta ='{params.meta}', summary = '{params.summary}', sce_norm = '{params.sce_norm}', fig_res ='{params.out_figpath}'))"'''


## -------------------------------------------------------------------------- ##
## Update index file
## -------------------------------------------------------------------------- ##

rule dataset_index:
    input: 
        script = config["src_summary"] + "dataset_index.Rmd"
    params:
        outdir = config["docs"]
    output:
        out = config["docs"] + "dataset_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd())"'''
        
        
rule char_index:
    input: 
        check = expand(config["docs"] + "batch_effect_{sample}.html", sample = sample),
        script = config["src_summary"] + "batch_index.Rmd"
    params:
        outdir = config["docs"],
        data_names = ",".join(sample)
    output:
        out = config["docs"] + "batch_index.html"
    shell:
        '''R -e "rmarkdown::render(input ='{input.script}', output_file=basename('{output.out}'), output_dir='{params.outdir}', knit_root_dir=getwd(), params = list(data_names='{params.data_names}'))"'''


   
